# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.
  config.vm.hostname = "clj-environs"

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "clj-environs"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://ec2-54-224-24-95.compute-1.amazonaws.com/boxes/CentOS-6.4-x86_64-v20130731.box"
  # config.vm.box_url = "~/src/Vagrant/boxes/rnr-ui-dotenv.box"
  config.vm.box_url = "http://ec2-54-224-24-95.compute-1.amazonaws.com/boxes/base.box"

  # Assign this VM to a host-only network IP, allowing you to access it
  # via the IP. Host-only networks can talk to the host machine as well as
  # any other machines on the same network, but cannot be accessed (through this
  # network interface) by any external networks.
  config.vm.network :private_network, ip: "192.168.33.80"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. 

  config.vm.network :forwarded_port, guest: 80, host: 8880, auto_correct: true

  # JBoss
  config.vm.network :forwarded_port, guest: 8080, host: 8888, auto_correct: true

  # Jenkins
  config.vm.network :forwarded_port, guest: 8090, host: 18090, auto_correct: true

  # vnc
  config.vm.network :forwarded_port, guest: 5901, host: 5901, auto_correct: true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Use NFS for the shared folder for much better performance
  #config.vm.synced_folder ".", "/vagrant", :nfs => true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider :virtualbox do |vb|
    # Use 1 GB memory
    vb.customize ["modifyvm", :id, "--memory", "1024"]
    # Configure the VM to use the Host DNS for the VPN
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  end

  # Define the Chef Solo run list here, because we need access to it outside of the Chef Solo provisioner.
  $chef_run_list = [
    "recipe[build-essential]",
    "recipe[git]",
    "recipe[emacs]",
    "recipe[vim]",
    "recipe[nginx]",
    "recipe[java]",
    "recipe[rvm::vagrant]",
    "recipe[leiningen]",
    "recipe[vnc::client]",
    "recipe[mercurial]",
    "recipe[ack-cookbook]",
    "recipe[tree]",
    "recipe[man]",
    "recipe[vnc]"
  ]

  # Add epel repo to yum.
  config.vm.provision :shell, :path => "./lib/vagrant/yum-vagrant.sh"

  config.vm.provision :shell, :path => "./lib/vagrant/ulimit-vagrant.sh" if recipe_enabled(:riak)

  # Set a valid terminal type (default = xterm)
  config.vm.provision :shell, :path => "./lib/vagrant/term-vagrant.sh", :args => 'xterm'

  config.vm.provision :shell, :inline => "yum -y install man" if recipe_enabled(:man)

  # Useful utilities.
  config.vm.provision :shell, :inline => "yum -y install man ftop lsof libxml2-devel.x86_64 zip.x86_64 unzip.x86_64 bzip2.x86_64 gzip.x86_64 libyaml-devel.x86_64 ruby-devel.x86_64 tmux.x86_64 openldap-devel.x86_64 nano.x86_64"

  # Install IDG tools
  config.vm.provision :shell, :path => "./lib/vagrant/idgtools-vagrant.sh"

  # Start NFS
  config.vm.provision :shell, :path => "./lib/vagrant/nfs-vagrant.sh"

  # Turn off the Firewall
  config.vm.provision :shell, :path => "./lib/vagrant/firewall-vagrant.sh"

  # Install ngrok
  config.vm.provision :shell, :path => "./lib/vagrant/ngrok-vagrant.sh"

  # The path to the Berksfile to use with Vagrant Berkshelf
  # config.berkshelf.berksfile_path = "./Berksfile"

  # Enabling the Berkshelf plugin. To enable this globally, add this configuration
  # option to your ~/.vagrant.d/Vagrantfile file
  config.berkshelf.enabled = true

  # An array of symbols representing groups of cookbook described in the Vagrantfile
  # to exclusively install and copy to Vagrant's shelf.
  # config.berkshelf.only = []

  # An array of symbols representing groups of cookbook described in the Vagrantfile
  # to skip installing and copying to Vagrant's shelf.
  # config.berkshelf.except = []

  config.vm.provision :chef_solo do |chef|
    chef.json = {
      # :mysql => {
      #   :server_root_password => 'rootpass',
      #   :server_debian_password => 'debpass',
      #   :server_repl_password => 'replpass'
      # }
      :leiningen => {
        :version => '2.3.4',
        :jar_url => 'https://leiningen.s3.amazonaws.com/downloads/leiningen-2.3.4-standalone.jar'
      }
    }
    chef.run_list = $chef_run_list
  end

  # Install rbenv, ruby-build, and rbenv-gemset for the vagrant user.
  config.vm.provision :shell, :path => "./lib/vagrant/rbenv-vagrant.sh"

  # Needed to run vnc cookbook
  #config.vm.provision :shell, :path => "lib/vagrant/bootstrap.sh"

  # Install and Start JBoss.  If JBoss is already installed, just start it.
  # config.vm.provision :shell, :path => "./lib/vagrant/jboss-vagrant.sh"

  # Install Immutant
  config.vm.provision :shell, :path => "./lib/vagrant/immutant-vagrant.sh"

  # Install and Start Jenkins.
  config.vm.provision :shell, :path => "./lib/vagrant/jenkins-vagrant.sh"

  # Install and start propsol_data_exporter (only works if /vagrant is nfs mounted)
  # config.vm.provision :shell, :path => "./lib/vagrant/propsol_data_exporter-vagrant.sh"

end

# Returns the index of the recipe in the Chef run_list, or nil if not found.
# All we really care about is whether the recipe is being provisioned by Chef or not.
def recipe_enabled(recipe)
  $chef_run_list.rindex {|r| r =~ /#{recipe}/}
end
